tinymce.PluginManager.add('cssclass', function (editor) {

    editor.on('init', function () {
        editor.plugins.cssclass.createCSSClassFormats();
    });

    this.createCSSClassFormats =  function () {

        tinymce.each(cssClassMenuItems.split(/[ ,]/), function (classname) {
            editor.formatter.register('CSSClass_' + classname, {
                inline: 'span', classes: classname
            });
        });
    }

	function buildCssClasslist() {
	    var classListItems = [{ text: 'None', value: '' }];

	    tinymce.each(cssClassMenuItems.split(/[ ,]/), function (classname) {
	        classListItems.push({
	            text: classname,
	            value: classname
	        });
	    });

	    return classListItems;
	}

	cssClassMenuItems = editor.getParam(
		"cssclass_list",
		"Class1, Class2, Class3"
	)        

	function applyCssClassFormat(classname) {
	    var list, formatter = editor.formatter, sel = editor.selection;

		if (sel.isCollapsed()) {
		    var selRng = sel.getRng();
		    selRng.expand("word"); //expands the DOM range to the current word
		    sel.setRng(selRng);
		}

		if (classname == "")
		{
		    tinymce.each(cssClassMenuItems.split(/[ ,]/), function (_classname) {
		        editor.formatter.remove('CSSClass_' + _classname)
		    });
		}
		else
		{
		    formatter.toggle("CSSClass_" + classname);
		}

		editor.undoManager.add();
        
	}

	function createCssClassHandler(items) {
	    return function () {
	        var self = this;  

	        editor.on('nodeChange', function (e) {
	            var value = null;

	            tinymce.each(e.parents, function (node) {
	                tinymce.each(items, function (item) {
	                    if (editor.dom.hasClass(node, item.value)) {
	                            value = item.value;
	                        }

	                    if (value) {
	                        return false;
	                    }
	                });

	                if (value) {
	                    return false;
	                }
	            });

	            self.value(value);
	        });


	        
	    };
	}


	this.applyCssClassFormat = applyCssClassFormat;

	editor.addButton('cssclass', {
		type: 'listbox',
		tooltip: 'CSS Classes',
		values: buildCssClasslist(),
		text: 'CSS Class',
		fixedWidth: true,
		onPostRender: createCssClassHandler(buildCssClasslist()),
		onselect: function(e) {
		    applyCssClassFormat(e.control.settings.value);
		}
	});
});