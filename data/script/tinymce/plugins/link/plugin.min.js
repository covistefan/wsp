/**
 * plugin.js
 *
 * Copyright, Moxiecode Systems AB
 * Released under LGPL License.
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */

/*global tinymce:true */

tinymce.PluginManager.add('link', function(editor) {
	function createLinkList(callback, delOldWin) {
		return function() {
			var linkList = editor.settings.link_list;
			var documentList = editor.settings.document_list;
			var classList = editor.settings.class_list;
			var classListText;

			if (typeof(classList) == "string") {
				tinymce.util.XHR.send({
					url: classList,
					success: function(text3) {
						classListText = tinymce.util.JSON.parse(text3);
					}
				})
			}
			if (typeof(linkList) == "string") {
				tinymce.util.XHR.send({
					url: linkList,
					success: function(text1) {
						if (typeof(documentList) == "string") {
							tinymce.util.XHR.send({
								url: documentList,
								success: function(text2) {
									callback(tinymce.util.JSON.parse(text1),tinymce.util.JSON.parse(text2), classListText, delOldWin);
								}
							});
						} else {
							callback(tinymce.util.JSON.parse(text1),documentList, classListText, delOldWin);
						}
					}
				});
			} else {
				if (typeof(documentList) == "string") {
					tinymce.util.XHR.send({
						url: documentList,
						success: function(text2) {
							callback(linkList,tinymce.util.JSON.parse(text2), classListText, delOldWin);
						}
					});
				} else {
					callback(linkList,documentList, classListText, delOldWin);
				}
			}

//			if (typeof(documentList) == "string") {
//				tinymce.util.XHR.send({
//					url: documentList,
//					success: function(text) {
//						callback(linkList,tinymce.util.JSON.parse(text));
//					}
//				});
//			} else {
//				callback(linkList,documentList);
//			}
			
		};
	}

	
	function showDialog(linkList,documentList, classList, delOldWin) {
		var data = {}, selection = editor.selection, dom = editor.dom, selectedElm, anchorElm, initialText;
		var win, linkListCtrl, langListCtrl, relListCtrl, targetListCtrl, documentListCtrl, classListCtrl, classListText;


		
		function linkListChangeHandler(e) {
			var textCtrl = win.find('#text');
			
		
			if (!textCtrl.value() || (e.lastControl && textCtrl.value() == e.lastControl.text())) {
				textCtrl.value(e.control.text());
			}

			win.find('#href').value(e.control.value());
			documentListCtrl.value('');
		}

		function documentListChangeHandler(e) {
			var textCtrl = win.find('#text');


			if (!textCtrl.value() || (e.lastControl && textCtrl.value() == e.lastControl.text())) {
				textCtrl.value(e.control.text());
			}

			win.find('#href').value(e.control.value());
			linkListCtrl.value('');			
		}

		function classListChangeHandler(e) {
			var textCtrl = win.find('#classes');
			
			win.find('#classes').value(textCtrl.value() + ' ' + e.control.value());
					
		}

		function buildLinkList() {
			var linkListItems = [{text: 'None', value: ''}];

			tinymce.each(linkList, function(link) {
				linkListItems.push({
					text: link.text || link.title,
					value: editor.convertURL(link.value || link.url, 'href'),
					menu: link.menu
				});
			});

			return linkListItems;
		}

		function buildDocumentList() {
			
			var documentListItems = [{text: 'None', value: ''}];

			tinymce.each(documentList, function(link) {
				documentListItems.push({
					text: link.text || link.title,
					value: editor.convertURL(link.value || link.url, 'href'),
					menu: link.menu
				});
			});

			return documentListItems;
		}
		

		function buildRelList(relValue) {
			var relListItems = [{text: 'None', value: ''}];

			tinymce.each(editor.settings.rel_list, function(rel) {
				relListItems.push({
					text: rel.text || rel.title,
					value: rel.value,
					selected: relValue === rel.value
				});
			});

			return relListItems;
		}

		function buildTargetList(targetValue) {
			var targetListItems = [{text: 'None', value: ''}];

			if (!editor.settings.target_list) {
				targetListItems.push({text: 'New window', value: '_blank'});
			}

			tinymce.each(editor.settings.target_list, function(target) {
				targetListItems.push({
					text: target.text || target.title,
					value: target.value,
					selected: targetValue === target.value
				});
			});

			return targetListItems;
		}



		function buildAnchorListControl(url) {
			var anchorList = [];

			tinymce.each(editor.dom.select('a:not([href])'), function(anchor) {
				var id = anchor.name || anchor.id;

				if (id) {
					anchorList.push({
						text: id,
						value: '#' + id,
						selected: url.indexOf('#' + id) != -1
					});
				}
			});

			if (anchorList.length) {
				anchorList.unshift({text: 'None', value: ''});

				return {
					name: 'anchor',
					type: 'listbox',
					label: 'Anchors',
					values: anchorList,
					onselect: linkListChangeHandler
				};
			}
		}


//		function buildClassList(classesValue) {
		function buildClassList() {
			var classListItems = [{text: 'None', value: ''}];
			tinymce.each(classList, function(classes) {
				classListItems.push({
					text: classes.text,
					value: classes.value
//					selected: classesValue === classes.value
				});
			});
			return classListItems;
		}

		function urlChange() {
			if (documentListCtrl) {
				documentListCtrl.value(editor.convertURL(this.value(), 'href'));
			}
			if (linkListCtrl) {
				linkListCtrl.value(editor.convertURL(this.value(), 'href'));
			}

			if (!initialText && data.text.length === 0) {
				this.parent().parent().find('#text')[0].value(this.value());
			}
		}
		
//		function maltesten(myText) {
////				var activeTab = myPanel.getActiveTab();
////				var activeTabIndex = myPanel.items.findIndex('id', activeTab.id);
//				alert(myText);
//		}


		if(delOldWin) {
			editor.windowManager.close(window);
		}

		selectedElm = selection.getNode();
		anchorElm = dom.getParent(selectedElm, 'a[href]');

		data.text = initialText = anchorElm ? (anchorElm.innerText || anchorElm.textContent) : selection.getContent({format: 'text'});
		data.href = anchorElm ? dom.getAttrib(anchorElm, 'href') : '';
		data.target = anchorElm ? dom.getAttrib(anchorElm, 'target') : '';
		data.rel = anchorElm ? dom.getAttrib(anchorElm, 'rel') : '';
		data.classes = anchorElm ? dom.getAttrib(anchorElm, 'class') : '';

		if (selectedElm.nodeName == "IMG") {
			data.text = initialText = " ";
		}

		if (linkList) {
			linkListCtrl = {
				name: 'webfile',
				type: 'listbox',
				label: 'Link list',
				values: buildLinkList(),
				onselect: linkListChangeHandler,
				value: editor.convertURL(data.href, 'href'),
				onPostRender: function() {
					linkListCtrl = this;
				}
			};
			
		}

		if (documentList) {
			documentListCtrl = {
				name: 'document',
				type: 'listbox',
				label: 'Document List',
				autofocus: true,
				values: buildDocumentList(),
				onselect: documentListChangeHandler,
				value: editor.convertURL(data.href, 'href'),
				onPostRender: function() {
					documentListCtrl = this;
				}
			};
			
		}

		if (editor.settings.target_list !== false) {
			targetListCtrl = {
				name: 'target',
				type: 'listbox',
				label: 'Target',
				values: buildTargetList(data.target)
			};
			
		}

		if (editor.settings.rel_list) {
			relListCtrl = {
				name: 'rel',
				type: 'listbox',
				label: 'Rel',
				values: buildRelList(data.rel)
			};
		}


		if (editor.settings.class_list !== false) {
			classListCtrl = {
				name: 'classesdd',
				type: 'listbox',
				label: 'verf√ºgbare Klasse ',
//				values: buildClassList(data.classes),
				values: buildClassList(),
				onselect:  classListChangeHandler
			};
		}


//		var generalFormItems = [
//			{name: 'src', type: 'filepicker', filetype: 'image', label: 'URL', autofocus: true, onchange: srcChange},
//			{name: 'alt', type: 'textbox', label: 'Image description'},
//			{
//				type: 'container',
//				label: 'Dimensions',
//				layout: 'flex',
//				direction: 'row',
//				align: 'center',
//				spacing: 5,
//				items: [
//					{name: 'width', type: 'textbox', maxLength: 3, size: 3, onchange: recalcSize},
//					{type: 'label', text: 'x'},
//					{name: 'height', type: 'textbox', maxLength: 3, size: 3, onchange: recalcSize},
//					{name: 'constrain', type: 'checkbox', checked: true, text: 'Constrain proportions'}
//				]
//			}
//		];
//		
//		var wspFormItems = [
//			imageListCtrl,
//			{
//				type: 'container',
//				label: 'Preview',
//				layout: 'flex',
//				direction: 'row',
//				align: 'center',
//				spacing: 5,
//				items: [
//					{type: 'label', text: '...'}
//				]
//			}
//		];
//		
		var uploadFormItems = [
			{
				type: 'iframe',
				border: '0',
				minWidth: '100',
				minHeight: '200',
				url: './data/javascript/tinymce/plugins/link/tinyupload.php'
			}
		];
		
		

		
		win = editor.windowManager.open({
			title: 'Insert link',
			name: 'linktabs',
			data: data,
			activeTab: 2,
			bodyType: 'tabpanel',
			body: [
					{
						title: 'General',
						type: 'form',
						items: [{
							name: 'href',
							type: 'filepicker',
							filetype: 'file',
							size: 40,
							
							label: 'Url',
							onchange: urlChange,
							onkeyup: urlChange
							},
							{name: 'text', type: 'textbox', size: 40, label: 'Text to display', onchange: function() {
								data.text = this.value();
							}},
							buildAnchorListControl(data.href),
							targetListCtrl,
							classListCtrl,
							{name: 'classes', type: 'textbox', size: 40, label: 'Klassen', value: data.classes
							}							
						]

					},
					
					{
						title: 'Dateisystem',
						type: 'form',
						items: [
							linkListCtrl,
							documentListCtrl,
							targetListCtrl
							]
					}
			],
					
			onSubmit: function(e) {
				var data = e.data, href = data.href;

				// Delay confirm since onSubmit will move focus
				function delayedConfirm(message, callback) {
					var rng = editor.selection.getRng();

					window.setTimeout(function() {
						editor.windowManager.confirm(message, function(state) {
							editor.selection.setRng(rng);
							callback(state);
						});
					}, 0);
				}

				function insertLink() {
					if (data.text != initialText) {
						if (anchorElm) {
							editor.focus();
							anchorElm.innerHTML = data.text;

							dom.setAttribs(anchorElm, {
								href: href,
								target: data.target ? data.target : null,
								rel: data.rel ? data.rel : null,
								class: data.classes ? data.classes : null
							});

							selection.select(anchorElm);
						} else {
							editor.insertContent(dom.createHTML('a', {
								href: href,
								target: data.target ? data.target : null,
								rel: data.rel ? data.rel : null,
								class: data.classes ? data.classes : null
							}, data.text));
						}
					} else {
						editor.execCommand('mceInsertLink', false, {
							href: href,
							target: data.target,
							rel: data.rel ? data.rel : null,
							class: data.classes ? data.classes : null
						});
					}
				}

				if (!href) {
					editor.execCommand('unlink');
					return;
				}

				// Is email and not //user@domain.com
				if (href.indexOf('@') > 0 && href.indexOf('//') == -1 && href.indexOf('mailto:') == -1) {
					delayedConfirm(
						'The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?',
						function(state) {
							if (state) {
								href = 'mailto:' + href;
							}

							insertLink();
						}
					);

					return;
				}

				// Is www. prefixed
				if (/^\s*www\./i.test(href)) {
					delayedConfirm(
						'The URL you entered seems to be an external link. Do you want to add the required http:// prefix?',
						function(state) {
							if (state) {
								href = 'http://' + href;
							}

							insertLink();
						}
					);

					return;
				}

				insertLink();
			}
		});
	}

	editor.addButton('link', {
		icon: 'link',
		tooltip: 'Insert/edit link',
		shortcut: 'Ctrl+K',
		onclick: createLinkList(showDialog, false),
		stateSelector: 'a[href]'
	});

	editor.addButton('unlink', {
		icon: 'unlink',
		tooltip: 'Remove link',
		cmd: 'unlink',
		stateSelector: 'a[href]'
	});

	editor.addShortcut('Ctrl+K', '', createLinkList(showDialog, false));

	this.showDialog = showDialog;

	this.testme = createLinkList(showDialog, true);
	
	
	editor.addMenuItem('link', {
		icon: 'link',
		text: 'Insert link',
		shortcut: 'Ctrl+K',
		onclick: createLinkList(showDialog, false),
		stateSelector: 'a[href]',
		context: 'insert',
		prependToContext: true
	});
	

});